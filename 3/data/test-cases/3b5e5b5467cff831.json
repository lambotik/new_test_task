{
  "uid" : "3b5e5b5467cff831",
  "name" : "test_updating_resource_by_id_1000",
  "fullName" : "test_example.TestApi#test_updating_resource",
  "historyId" : "5532d1d9212a7d25c8ffaff9db85594f",
  "time" : {
    "start" : 1725455035511,
    "stop" : 1725455035634,
    "duration" : 123
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: Incorrect status code: 500",
  "statusTrace" : "self = <test_example.TestApi object at 0x7fbb76a6cec0>, set_id = 1000\n\n    @allure.suite('PUT')\n    @pytest.mark.parametrize('set_id', (1, 10, 100, 1000, '99', -1))\n    def test_updating_resource(self, set_id):\n        allure.dynamic.title(f'test_updating_resource_by_id_{set_id}')\n        body = {'id': set_id,\n                'title': 'foo',\n                'body': 'bar',\n                'userId': 1}\n        response = API.put_updating_resource(\n            body=body,\n            set_id=set_id)\n>       Checking.check_status_code(response, 200)\n\ntest_example.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresult = <Response [500]>, status_code = 200\n\n    @staticmethod\n    def check_status_code(result: requests.models.Response, status_code: int):\n        \"\"\"\n        Method check status code\n        :param result: Response\n        :param status_code:\n        \"\"\"\n        with allure.step(f'Assert status code: {status_code} == Response status code: {result.status_code}'):\n>           assert status_code == result.status_code, f'Incorrect status code: {result.status_code}'\nE           AssertionError: Incorrect status code: 500\n\nchecking.py:16: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: Incorrect status code: 500",
    "statusTrace" : "self = <test_example.TestApi object at 0x7fbb76a6cec0>, set_id = 1000\n\n    @allure.suite('PUT')\n    @pytest.mark.parametrize('set_id', (1, 10, 100, 1000, '99', -1))\n    def test_updating_resource(self, set_id):\n        allure.dynamic.title(f'test_updating_resource_by_id_{set_id}')\n        body = {'id': set_id,\n                'title': 'foo',\n                'body': 'bar',\n                'userId': 1}\n        response = API.put_updating_resource(\n            body=body,\n            set_id=set_id)\n>       Checking.check_status_code(response, 200)\n\ntest_example.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresult = <Response [500]>, status_code = 200\n\n    @staticmethod\n    def check_status_code(result: requests.models.Response, status_code: int):\n        \"\"\"\n        Method check status code\n        :param result: Response\n        :param status_code:\n        \"\"\"\n        with allure.step(f'Assert status code: {status_code} == Response status code: {result.status_code}'):\n>           assert status_code == result.status_code, f'Incorrect status code: {result.status_code}'\nE           AssertionError: Incorrect status code: 500\n\nchecking.py:16: AssertionError",
    "steps" : [ {
      "name" : "Endpoint: /posts/1000",
      "time" : {
        "start" : 1725455035633,
        "stop" : 1725455035633,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Request:",
      "time" : {
        "start" : 1725455035633,
        "stop" : 1725455035633,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "Url: https://jsonplaceholder.typicode.com/posts/1000",
        "time" : {
          "start" : 1725455035633,
          "stop" : 1725455035633,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      }, {
        "name" : "Headers: {'Content-Type': 'application/json; charset=UTF-8', 'Authorization': ''}",
        "time" : {
          "start" : 1725455035633,
          "stop" : 1725455035633,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      }, {
        "name" : "Body: {'id': 1000, 'title': 'foo', 'body': 'bar', 'userId': 1}",
        "time" : {
          "start" : 1725455035633,
          "stop" : 1725455035633,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 3,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "Response:",
      "time" : {
        "start" : 1725455035633,
        "stop" : 1725455035633,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "Status code: 500",
        "time" : {
          "start" : 1725455035633,
          "stop" : 1725455035633,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      }, {
        "name" : "JSON: TypeError: Cannot read properties of undefined (reading 'id')\n    at update (/app/node_modules/json-server/lib/server/router/plural.js:262:24)\n    at Layer.handle [as handle_request] (/app/node_modules/express/lib/router/layer.js:95:5)\n    at next (/app/node_modules/express/lib/router/route.js:137:13)\n    at next (/app/node_modules/express/lib/router/route.js:131:14)\n    at Route.dispatch (/app/node_modules/express/lib/router/route.js:112:3)\n    at Layer.handle [as handle_request] (/app/node_modules/express/lib/router/layer.js:95:5)\n    at /app/node_modules/express/lib/router/index.js:281:22\n    at param (/app/node_modules/express/lib/router/index.js:354:14)\n    at param (/app/node_modules/express/lib/router/index.js:365:14)\n    at Function.process_params (/app/node_modules/express/lib/router/index.js:410:3)",
        "time" : {
          "start" : 1725455035633,
          "stop" : 1725455035633,
          "duration" : 0
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : false
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 2,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "Assert status code: 200 == Response status code: 500",
      "time" : {
        "start" : 1725455035633,
        "stop" : 1725455035633,
        "duration" : 0
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: Incorrect status code: 500\n",
      "statusTrace" : "  File \"/home/runner/work/new_test_task/new_test_task/checking.py\", line 16, in check_status_code\n    assert status_code == result.status_code, f'Incorrect status code: {result.status_code}'\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 9,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Test Api."
  }, {
    "name" : "suite",
    "value" : "PUT"
  }, {
    "name" : "subSuite",
    "value" : "TestApi"
  }, {
    "name" : "host",
    "value" : "fv-az651-461"
  }, {
    "name" : "thread",
    "value" : "2242-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_example"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "set_id",
    "value" : "1000"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "3b5e5b5467cff831.json",
  "parameterValues" : [ "1000" ]
}